{"version":3,"sources":["components/Square.js","components/Board.js","components/Game.js","helper.js","index.js"],"names":["Square","value","onClick","gameIsActive","style","className","disabled","Board","squares","map","square","i","Game","useState","setGameIsActive","Array","fill","history","setHistory","winnerHistory","setWinnerHistory","currentStep","setCurrentStep","xNext","setXNext","currentWinner","setCurrentWinner","useEffect","hasWinner","lines","length","a","b","c","calculateWinner","currentBoardState","_step","move","destination","step","entry","index","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.14849b91.chunk.js","sourcesContent":["const Square = ({ value, onClick, gameIsActive }) => {\n  const style = value ? `squares ${value}` : `squares`;\n \n  return (\n    <button className={style} onClick={onClick} disabled={gameIsActive}>\n      {value}\n    </button>     \n  )\n}\n\nexport default Square;\n","import React from 'react';\nimport Square from './Square';\n\nconst Board = ({ squares, onClick, gameIsActive }) => (\n  <div className=\"board\">\n    {squares.map((square, i) => (\n      <Square key={i} value={square} onClick={() => onClick(i)} gameIsActive={gameIsActive} />\n    ))}\n  </div>\n);\n\nexport default Board; \n","import React, { useEffect, useState } from 'react';\nimport { calculateWinner } from '../helper';\nimport Board from './Board';\n\nconst Game = () => {\n  const [gameIsActive, setGameIsActive] = useState(false);\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  const [winnerHistory, setWinnerHistory] = useState([]);\n  const [currentStep, setCurrentStep] = useState(0);\n  const [xNext, setXNext] = useState(true);\n  const [currentWinner, setCurrentWinner] = useState(null);\n\n  useEffect(()=>{\n    let hasWinner = calculateWinner(history[currentStep]);\n    if (hasWinner) {\n      setCurrentWinner(hasWinner);\n      setWinnerHistory([...winnerHistory, hasWinner])\n    }\n    if (currentWinner) {\n      setGameIsActive(true);\n    }\n  }, [history])\n\n\n  const handleClick = (i) => {\n    if (!currentWinner) {\n      \n      const currentBoardState = history[currentStep];\n      const squares = [...currentBoardState];\n        if (!squares[i]) {\n          squares[i] = xNext ? 'X' : 'O';\n          setHistory([...history, squares]);\n          setXNext(!xNext);\n          setCurrentStep(currentStep+1);\n        } else {\n          return\n        }\n    }\n  };\n\n  const goTo = (step) => {\n    setCurrentStep(step);\n    setXNext(step % 2 === 0);\n    if (step === 0) {\n      setHistory([Array(9).fill(null)]);\n      setCurrentWinner(null);\n      setGameIsActive(false);\n    }\n\n  }\n\n  const renderMoves = () => \n    history.map((_step, move) => {\n      const destination = move ? `Go to move â„–${move}` : <p className=\"btn-start\">Go to start</p>;\n      return (\n        <li key={move}>\n          <button onClick={() => goTo(move)}>{destination}</button>\n        </li>\n      )\n  });\n\n  const renderWinnerHistory = () => {\n    if (winnerHistory.length === 0) {\n      return <li className=\"noOne\">no one</li>\n    }; \n    return winnerHistory.map((entry, index) => <li key={index}>{entry} wins ! </li>)\n  };\n\n  return (\n    <>\n      <h1> Tic Tac Toe Game</h1>\n      <Board squares={history[currentStep]} onClick={handleClick} gameIsActive={gameIsActive}/>\n      <div className=\"info-wrapper\">\n        <div>\n          <h3>History</h3>\n          {renderMoves()}\n        </div>\n        <h3>\n          {currentWinner ? `Winner: ${currentWinner}` : `Next Player:  ${xNext ? 'X' : 'O'}`}\n        </h3>\n        <div>\n          <h3>Winner History</h3>\n            <div className=\"winnerHistory-list\">\n              {renderWinnerHistory()}\n            </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Game;\n","export function calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n  ];\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares [a] === squares[c]){\n      return squares[a];\n    }\n  }\n  return null;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './components/Game';\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}